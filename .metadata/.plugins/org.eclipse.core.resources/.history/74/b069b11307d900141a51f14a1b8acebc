package nju.edu.cn.leetcode;

import java.util.Arrays;

public class UniqueBinarySearchTrees {
	
	boolean[] occupied;
	int MAX_LENGTH;
	
	public int numTrees(int n) {
		
		occupied = new boolean[n+1];
		Arrays.fill(occupied, false);
		MAX_LENGTH = n;
		
        int result = 0;
        
        
        return result;
    }
	
	private int BSTNums(int length) {
		int result = 0;
		
		if (length == 0) return 0;
		if (length == 1) return 1;
		if (length == 2) return 2;
		
		for (int i = 0; i < length; i++) {
			occupied[i] = true;
			
			//左子树的可能性
			int leftNum = BSTNums(getLeftLength(i)-1);
			//右子树的可能性
			int rightNum = BSTNums(length)
			//相乘
			
			occupied[i] = false;
		}
		return result;
	}
	
	private int getLeftLength(int i) {
		if (i < 0) return 0;
		int num = 0;
		while(i >= 0 && !occupied[i]){
			num++;
			i--;
		}
		return num;
	}

	private int getRightLength(int i) {
		if (i < 0) return 0;
		int num = 0;
		while(i < n && !occupied[i]){
			num++;
			i--;
		}
		return num;
	}
}
