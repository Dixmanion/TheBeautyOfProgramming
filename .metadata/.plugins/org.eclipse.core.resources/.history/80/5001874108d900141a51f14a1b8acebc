package nju.edu.cn.leetcode;

import java.util.Arrays;

public class UniqueBinarySearchTrees {
	
	public static void main(String[] args) {
		UniqueBinarySearchTrees uniqueBinarySearchTrees = new UniqueBinarySearchTrees();
		System.out.println(uniqueBinarySearchTrees.numTrees(4));
	}
	
	boolean[] occupied;
	int MAX_LENGTH;
	int[] numTrees;
	
	public int numTrees(int n) {
		
		occupied = new boolean[n+1];
		Arrays.fill(occupied, false);
		MAX_LENGTH = n;
		numTrees = new int[n+1];//DP
		
        return BSTNums(n);
    }
	
	private int BSTNums(int length) {
		int result = 0;
		
		if (length == 1 || length == 0) return 1;
		if (length == 2) return 2;
		
		for (int i = 0; i < length; i++) {
			occupied[i] = true;
			
			//左子树的可能性
			int leftNum = BSTNums(getLeftLength(i-1));
			System.out.println("leftNum = " + leftNum);
			//右子树的可能性
			int rightNum = BSTNums(getRightLength(i+1));
			//相乘
			result = leftNum*rightNum + result;
			
			occupied[i] = false;
		}
		return result;
	}
	
	private int getLeftLength(int i) {
		if (i < 0) return 0;
		int num = 0;
		while(i >= 0 && !occupied[i]){
			num++;
			i--;
		}
		return num;
	}

	private int getRightLength(int i) {
		if (i >= MAX_LENGTH) return 0;
		int num = 0;
		while(i < MAX_LENGTH && !occupied[i]){
			num++;
			i++;
		}
		return num;
	}
}
