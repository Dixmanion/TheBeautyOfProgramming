package nju.edu.cn;

public class PancakeSorting {

	int[] m_cakeArray; // 烙饼信息数组
    int m_nCakeCnt;    // 烙饼个数
    int m_nMaxSwap;    // 最多交换次数,最多为2*(m_nCakeCnt-1)
    int[] m_swapArray; // 交换结果数组
    int[] m_reverseCakeArray; // 当前翻转烙饼信息数组
    int[] m_reverseCakeArraySwap; // 当前翻转烙饼交换信息数组
    int m_nSearch; //当前搜索次数信息
    
    public PancakeSorting(){
    	m_nCakeCnt = 0;
    	m_nMaxSwap = 0;
    }
    
    void run(int[] pCakeArray){
    	init(pCakeArray);
        m_nSearch = 0;
        search(0);
    }
    
    void output(){
    	
    }
    
    void init(int[] pCakeArray){
    	assert( pCakeArray != null);
        assert( pCakeArray.length > 0);
        
        m_nCakeCnt = pCakeArray.length;
        m_cakeArray = new int[m_nCakeCnt];
        for (int i = 0; i < m_nCakeCnt; i++) {
			m_cakeArray[i] = pCakeArray[i];
		}
        
        m_nMaxSwap = upperBound(m_nCakeCnt);
        m_swapArray = new int[m_nMaxSwap];
        
        m_reverseCakeArray = new int[m_nCakeCnt];
        for (int i = 0; i < m_nCakeCnt; i++) {
			m_reverseCakeArray[i] = m_cakeArray[i];
		}
        
        m_reverseCakeArraySwap = new int[m_nMaxSwap];
    }
    
    int lowerBound(int[] pCakeArray){
    	int t, ret = 0;
    	
    	for (int i = 1; i < pCakeArray.length; i++) {
			t = pCakeArray[i] - pCakeArray[i-1];
			if (t==1 || t==-1) {
				
			}else{
				ret++;
			}
		}
    	return ret;
    }
    
    
    int upperBound(int nCakeCnt){
    	return nCakeCnt*2;
    }
    
    void search(int step){
    	
    }
    
    boolean isSorted(int[] pCakeArray){
    	return false;
    }
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
